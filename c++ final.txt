1) შექმენით სტუდენტის კლასი თავისი კონსტრუქტორით, რომელიც მოიცავს
1. პრივატულ ცვლადს, საძიებელი ნიშანი. 
პრივატულ მეთოდებს:
2. სტუდენტების მასივის მნიშვნელობების რანდომული გენერატორით შევსება.
გამოიყენეთ ნულოვანი სიდი: srand (time(NULL));
3. თითოეულ სტრიქონში დაასორტიროს ზრდადობით ნიშნები.
4. პრივატული ცვლადის გამოყენებით იპოვოს თითოეული სტუდენტის ნიშნებში დამთხვევა (აქ იგულისხმება თითოეულ სტრიქონში არსებობს თუ არა მსგავსი ნიშანი, თუ არსებობს დაბეჭდოს ინდექსი თუ არ არსებობს დაბეჭდოს საჭირო შეტყობინება).
5. Main_ში დაბეჭდოს თითოეული სტუდენტისთვის მაქსიმალური შეფასება.
6. დარჩენილი შეფასებები ააჯამოს 
7. დაითვალოს მათი საშუალო არითმეტიკულის მესამე ხარისხიდან ფესვი და
დაბეჭდოს. 
8. კოდში თითოეული შედეგის დაბეჭვდისას აღწერეთ თითოეული შედეგი. მასივის შევსებისას და სორტირებისას დაბეჭდეთ შედეგი.

შეფასებების სტრუქტურა: 1) 2 ქულა; 2) 4 ქულა; 3) 4 ქულა; 4) 4 ქულა; 5) 1 ქულა; 6) 1 ქულა; 7) 1 ქულა; 8) 3 ქულა;


#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <iomanip>

using namespace std;

class Student {
   
    float targetMark;
   
    void generateTable() {
        srand(time(NULL));
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                MarkTable[i][j] = rand() % 10;
            }
            cout << endl;
        }
    }
   
    void bubbleSortRow(float row[]) {
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4 - i; ++j) {
                if (row[j] > row[j + 1]) {
                    int temp = row[j];
                    row[j] = row[j + 1];
                    row[j + 1] = temp;
                }
            }
        }
    }

    void sort(){
        for (int i = 0; i < 5; ++i) {
            bubbleSortRow(MarkTable[i]);
        }
    }
   
    void getMaxMarksAndRoot(){
        cout<<endl;
        for (int i = 0; i < 5; ++i) {
        float maxNumber = MarkTable[i][0];
        float sum = 0;

        for (int j = 0; j < 5; ++j) {
            if (MarkTable[i][j] > maxNumber) {
                maxNumber = MarkTable[i][j];
            }
            sum += MarkTable[i][j];
        }
        sum -= maxNumber;
       
        cout << "Row " << i + 1 << ": ";
        cout << "Max = " << maxNumber << ", ";
        cout << "Sum (excluding max) = " << sum << ", ";
        sum = sum/5;
        cout << "Root (3) = " <<  pow(sum, 1.0/3.0) << endl;
        }
    }
   
    void findMark() {
        cout<<"\nMatched Indexes in Sorted array: "<<endl;
        for (int i = 0; i < 5; i++) {
            cout<<"\nRow "<< i <<" : ";
            bool found = false;
            for (int j = 0; j < 5; j++) {
                if (MarkTable[i][j] == targetMark) {
                    cout << "Found at: " << "(" << i << "; " << j <<")"<< ". ";
                    found = true;
                }
            }
            if (!found) {
                cout << "Not found";
            }
            found = false;
        }
    }

public:
    float MarkTable[5][5];
    Student(int targetMark) {
        this->targetMark = targetMark;
        generateTable();
        print();
        sort();
        getMaxMarksAndRoot();
        findMark();
    }

    void print() {
        cout << " Py" << " C++ " << " Jvm " << " C " << " Js " << endl;
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                cout << setw(3)<< MarkTable[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {

    Student student(4);
    cout<<"\n\nSorted Table: "<<endl;
    student.print();
    return 0;
}

------------------------
result:
--------------------------------------

Py C++  Jvm  C  Js 
  3   9   9   6   9 
  1   1   5   7   5 
  2   5   5   5   4 
  4   9   0   4   4 
  4   8   9   4   9 

Row 1: Max = 9, Sum (excluding max) = 27, Root (3) = 1.75441
Row 2: Max = 7, Sum (excluding max) = 12, Root (3) = 1.33887
Row 3: Max = 5, Sum (excluding max) = 16, Root (3) = 1.47361
Row 4: Max = 9, Sum (excluding max) = 12, Root (3) = 1.33887
Row 5: Max = 9, Sum (excluding max) = 25, Root (3) = 1.70998

Matched Indexes in Sorted array: 

Row 0 : Not found
Row 1 : Not found
Row 2 : Found at: (2; 1). 
Row 3 : Found at: (3; 1). Found at: (3; 2). Found at: (3; 3). 
Row 4 : Found at: (4; 0). Found at: (4; 1). 

Sorted Table: 
 Py C++  Jvm  C  Js 
  3   6   9   9   9 
  1   1   5   5   7 
  2   4   5   5   5 
  0   4   4   4   9 
  4   4   8   9   9 
----------------------------------------------------------------------------------------

2)

1. შექმენით ცარიელი 10 წევრიანი წრფივი მასივი და შეავსეთ მნიშნველობები რანდომული რიცხვებით გამოიყენეთ ნულოვანი სიდი: srand (time(NULL));
2. შექმენით მეთოდი რომელიც მიმთითებლის გამოყენებით (*) მასივის სორტიტებას მოახდენს კლებადობის მიხედვით. 
3. Main_ში შექმენით მარტივი სამ პირობიანი სვიჩი(switch), რომლის თითოეული პირობა იქნება 4 ზე ნაშთი (1, 2, 3 ან 0).
4. კოდში თითოეული შედეგის დაბეჭვდისას აღწერეთ თითოეული შედეგი. მასივის შევსებისას და სორტირებისას დაბეჭდეთ შედეგი. 
5.Main()_ში ინიციალიზაცია გაუკეთეთ ორ სტრინგს, შეადარეთ ეს ორი სტრინგი ერთმანეთს strcmp() ფუნქციის მეშვეობით და დაბეჭდეთ საჭირო შედეგი შეტყობინებით.
6. გადაწერეთ პირველი სტრინგის პირველი 5 სიმბოლო მეორე სტრინგის ბოლოს და დაბეჭდეთ საჭირო შედეგი შეტყობინებით.
7. დაბეჭდეთ პირველი სტრინგის პირველი სიმბოლოს რიცხვითი მნიშვნელობა და
8. მეორე სტრინგი გადაიყვანეთ UperCase_ში.

შეფასებების სტრუქტურა: 1) 3 ქულა; 2) 4 ქულა; 3) 3 ქულა; 4) 2 ქულა; 5) 2 ქულა; 6) 2 ქულა; 7) 2 ქულა; 8) 2 ქულა;

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cctype>
using namespace std;

void sortArrayDescending(int* arr, int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] < arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    
    srand(time(NULL));
    int arr[10];
    cout << "Original Array: ";
    for (int i = 0; i < 10; i++) {
        arr[i] = rand() % 20;
        cout << arr[i] << " ";
    }
    cout << endl;
    
    sortArrayDescending(arr, 10);
    cout << "Sorted Array (Descending): ";
    for (int i = 0; i < 10; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    int remainder = 2;
    switch (remainder) {
        case 0:
            cout << "Remainder is 0." << endl;
            break;
        case 1:
            cout << "Remainder is 1." << endl;
            break;
        case 2:
            cout << "Remainder is 2." << endl;
            break;
        case 3:
            cout << "Remainder is 3." << endl;
            break;
        default:
            cout << "Remainder is not 0, 1, 2, or 3." << endl;
            break;
    }
    
    string str1 = "Hello";
    string str2 = "World";
    cout<<"str1 : "<< str1<<", "<< "str2 : "<<str2<<endl;
    
    int result = strcmp(str1.c_str(), str2.c_str());
    if (result == 0) {
        cout << "The strings are equal." << endl;
    } else if (result < 0) {
        cout << "str1 value is less than str2 value." << endl;
    } else {
        cout << "str1 value is greater than str2 value." << endl;
    }
    
    str2 += str1.substr(0, 5);
    cout << "Concatenated str2: " << str2 << endl;
    
    int numericValue = int(str1[0]);
    cout << "Numeric value of the first character in Str1: " << numericValue << endl;
    
    for (char& c : str2) {
        c = toupper(c);
    }
    cout << "String 2 in uppercase: " << str2 << endl;
    return 0;
}

------------------------
result:
--------------------------------------

Original Array: 15 16 2 15 9 19 2 7 12 0 
Sorted Array (Descending): 19 16 15 15 12 9 7 2 2 0 
Remainder is 2.
str1 : Hello, str2 : World
str1 value is less than str2 value.
Concatenated str2: WorldHello
Numeric value of the first character in Str1: 72
String 2 in uppercase: WORLDHELLO

----------------------------------------------------------------------------------------




